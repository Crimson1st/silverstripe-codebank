<?php
require_once(dirname(__FILE__).'/external/adodb/adodb.inc.php');
require_once(dirname(__FILE__).'/external/adodb/adodb-exceptions.inc.php');
require_once(dirname(__FILE__).'/error_handler.php');
require_once(dirname(__FILE__).'/../config/main.php');

set_error_handler('error_handler');

/**
 * Used to squish (whitespace compress) HTML/XML markup generated by PHP.
 * This function is XML-safe.
 * This function can be used by ob_start as a buffer callback.
 * @param aBuffer Original markup string.
 * @return Squished markup string.
 */
function squishXML($aBuffer) {
    $buf = $aBuffer;
    
    
    //whitespace between tags
    $buf = preg_replace('/>\s+</', '> <', $buf);
    
    //empty html comments
    $buf = preg_replace('/<!--\s+-->/', '', $buf);
    
    //extra whitespace between attributes
    $buf = preg_replace('/(\s?)\s*([A-Za-z0-9]+="[^<>"]*")(\s?)\s*/', '$1$2 ', $buf);
    
    
    return $buf;
}

/**
 * Escapes characters which may cause problems in SQL strings.
 *
 * @param  aString Original string
 * @return Encoded string
 */
function encSQLString($aString) {
    $newString = $aString;

    $newString = str_replace("'", "\'", str_replace("\\", "\\\\",$newString));

    return $newString;
}

/**
 * Escapes characters which may cause problems in SQL LIKE patterns.
 *
 * @param  aString Original string
 * @return Encoded string
 */
function encSQLLike($aString) {
    $newString = $aString;

    $newString = str_replace("'", "'", $newString);
    $newString = str_replace("[", "[[]", $newString);
    $newString = str_replace("%", "[%]", $newString);
    $newString = str_replace("_", "[_]", $newString);

    return $newString;
}

/**
 * Escapes characters which may cause problems in SQL ints.
 *
 * @param  aString Original string
 * @return Encoded string
 */
function encSQLInt($aString) {
    return strval(intval($aString));
}

/**
 * Escapes characters which may cause problems in SQL floats.
 *
 * @param  aString Original string
 * @return Encoded string
 */
function encSQLFloat($aString) {
    return strval(floatval($aString));
}

/**
 * Escapes characters which may cause problems in html.
 *
 * @param  aString Original string
 * @return Encoded string
 */
function encXMLChars($aString) {
    return str_replace('<','&lt;',str_replace('>','&gt',$aString));
}

/**
 * Escapes characters which may cause security problems in the file system. Removes all characters except A–Za–z0–9._- as well as all ./ and ../'s. Also removes starting .'s
 * @param  aString Original string
 * @return Encoded string
 */
function encFileString($aString) {
    $securityFix=array(
                        '../',
                        './'
                    );
    
    $newString=str_replace($securityFix,'',$aString);
    $newString=preg_replace('/(^\.|[^A-Za-z0-9-_\.\/\\\])/','',$newString);
    
    return $newString;
}

/**
 * Converts ISO Format Date into read-able date.
 * @param {string} $isoDate ISO formated date.
 * @return {string} read-able date format.
 */
function dbDateConvert($isoDate) {
    $newDate=strtotime($isoDate);
    $newDate=date("F d Y g:i A",$newDate);
    
    return $newDate;
}

/**
 * Converts Standard Date into ISO Formated date.
 * @param {string} $date Standard formated date.
 * @return {string} ISO date format.
 */
function toDBDateConvert($date) {
    $newDate=strtotime($date);
    $newDate=date("Y-m-d H:i",$newDate);
    
    return $newDate;
}

/**
 * Retrieves request items based on type requested
 * @param {string} $aKey Key to use to get items from request variables
 * @param {int} $aType If type is null than post will be checked first then get. If this is 0 then post will be used, if 1 then get will be used.
 * @return Returns a blank string when no value is found or the value of the request item otherwise.
 */
function getRequestItem($aKey,$aType) {
    if($aType==-1) {
        if(array_key_exists($aKey,$_POST)) {
            return stripslashes_deep($_POST[$aKey]);
        }else if(array_key_exists($aKey,$_GET)) {
            return stripslashes_deep($_GET[$aKey]);
        }else {
            return "";
        }
    }else if($aType==0) {
        if(array_key_exists($aKey,$_POST)) {
            return stripslashes_deep($_POST[$aKey]);
        }else {
            return "";
        }
    }else if($aType==1) {
        if(array_key_exists($aKey,$_GET)) {
            return stripslashes_deep($_GET[$aKey]);
        }else {
            return "";
        }
    }
}

/**
 * Strips Slashes even from an array
 * @return returns input without slashes.
 */
function stripslashes_deep($value) {
    $value = is_array($value) ?
                array_map('stripslashes_deep', $value) :
                stripslashes($value);

    return $value;
}

/**
 * Opens a database connection
 * @return {ADONewConnection} Returns a database connection resourse
 */
function &openDB(){
    $db = ADONewConnection('mysql');
    $db->Connect(MYSQL_SERVER, MYSQL_USER, MYSQL_PASSWORD, MYSQL_DATABASE,true);
    $db->SetFetchMode(ADODB_FETCH_ASSOC);
    
    if($db!==false){
        return $db;
    }else {
        echo 'Failed to Connect to Database';
        exit;
    }
    
    unset($_DATABASE);
}


/**
 * Checks to see if login is valid
 * @return {boolean} Returns true when session valid false otherwise
 */
function checkLogin() {
    if(!array_key_exists('id',$_SESSION) || !array_key_exists('user',$_SESSION) || !array_key_exists('loginKey',$_SESSION)) {
        return false;
    }
    
    $conn=openDB();
    
    $query="SELECT id
            FROM users
            WHERE id=".encSQLInt($_SESSION['id'])." AND username='".encSQLString($_SESSION['user'])."' AND loginKey='".encSQLString($_SESSION['loginKey'])."' AND lastLoginIP='".encSQLString($_SERVER['REMOTE_ADDR'])."'";
    $count=$conn->Execute($query)->recordCount();
    
    $conn->close();
    
    if($count==1) {
        return true;
    }else {
        return false;
    }
}
?>